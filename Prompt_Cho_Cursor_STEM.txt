**Prompt Yêu Cầu Cursor Thực Hiện Dự Án Quản Lý Dự Án STEM**

Cursor, tôi cần bạn triển khai một ứng dụng web quản lý dự án STEM sử dụng Python và Flask, dựa trên các hướng dẫn chi tiết trong tài liệu đính kèm. Ứng dụng này cho phép học sinh nộp dự án và giáo viên quản lý, chấm điểm các dự án. Vui lòng tuân thủ chặt chẽ cách tiếp cận theo từng giai đoạn được nêu trong tài liệu, đảm bảo tất cả các tính năng được triển khai chính xác.

Ngoài việc tuân theo tài liệu đính kèm, hãy tích hợp các cải tiến sau để làm cho ứng dụng mạnh mẽ hơn, an toàn hơn và dễ hiểu hơn cho người mới bắt đầu:

1. **Bình Luận Chi Tiết và Giải Thích**:
   - Thêm các bình luận toàn diện trong mã để giải thích từng bước, đặc biệt là các khái niệm phức tạp như:
     - Mô hình hóa cơ sở dữ liệu với SQLAlchemy (ví dụ: định nghĩa mô hình và mối quan hệ).
     - Xác thực người dùng với Flask-Login (ví dụ: quản lý phiên, truy cập dựa trên vai trò).
     - Xử lý tải lên file (ví dụ: xác thực, lưu trữ an toàn).
   - Điều này sẽ giúp người mới hiểu rõ hơn về mã và học hỏi từ nó.

2. **Xử Lý Lỗi và Xác Thực**:
   - Đối với tất cả các biểu mẫu đầu vào của người dùng (ví dụ: đăng ký, đăng nhập, tạo dự án, nộp bài), triển khai xác thực mạnh mẽ và xử lý lỗi.
   - Đảm bảo người dùng nhận được thông báo lỗi rõ ràng và hữu ích khi đầu vào không hợp lệ (ví dụ: tên người dùng trùng lặp, loại file không hợp lệ).
   - Sử dụng các khối try-except khi thích hợp để xử lý các ngoại lệ tiềm ẩn, như lỗi cơ sở dữ liệu hoặc sự cố hệ thống file.

3. **Quản Lý Cấu Hình An Toàn**:
   - Sử dụng biến môi trường hoặc phương pháp cấu hình an toàn (ví dụ: file `.env`) để lưu trữ thông tin nhạy cảm như:
     - URI cơ sở dữ liệu (ví dụ: `SQLALCHEMY_DATABASE_URI`).
     - Khóa bí mật (ví dụ: `SECRET_KEY` cho Flask).
   - Tránh mã hóa cứng các giá trị này trực tiếp trong mã nguồn.

4. **Tải Lên File An Toàn**:
   - Khi xử lý tải lên file (ví dụ: bài nộp dự án của học sinh), xác thực:
     - Loại file (ví dụ: chỉ cho phép PDF, ZIP).
     - Kích thước file (ví dụ: giới hạn 10MB như đề xuất).
   - Đảm bảo các file được tải lên được lưu trữ an toàn với tên file duy nhất (ví dụ: bằng cách thêm UUID hoặc dấu thời gian) để tránh xung đột và rủi ro bảo mật.
   - Lưu trữ file trong thư mục không thể truy cập trực tiếp qua web hoặc sử dụng dịch vụ lưu trữ đám mây nếu phù hợp.

5. **Di Chuyển Cơ Sở Dữ Liệu**:
   - Mặc dù không bắt buộc đối với ứng dụng cơ bản này, hãy thêm một phần hoặc bình luận giải thích cách thiết lập di chuyển cơ sở dữ liệu bằng công cụ như Flask-Migrate.
   - Điều này sẽ hữu ích nếu lược đồ cơ sở dữ liệu cần được cập nhật trong tương lai (ví dụ: thêm các trường mới vào mô hình).

6. **Kiểm Thử Cơ Bản**:
   - Viết các bài kiểm thử đơn giản cho các chức năng quan trọng, như:
     - Đăng ký và đăng nhập người dùng.
     - Tạo và nộp dự án.
     - Chấm điểm bài nộp.
   - Sử dụng framework `unittest` hoặc `pytest` của Python cho mục đích này.
   - Điều này sẽ giúp đảm bảo ứng dụng hoạt động như mong đợi và là công cụ học tập cho người mới.

7. **Cải Thiện Giao Diện Người Dùng**:
   - Sử dụng framework CSS như Bootstrap (như đề xuất trong tài liệu đính kèm) để tạo giao diện đáp ứng và hấp dẫn về mặt thị giác.
   - Đảm bảo mẫu cơ sở (`base.html`) bao gồm:
     - Thanh điều hướng với các liên kết có điều kiện dựa trên vai trò người dùng (ví dụ: "Dashboard" cho người đã đăng nhập, "Đăng nhập/Đăng ký" cho khách).
     - Thông báo flash để hiển thị thông báo thành công hoặc lỗi.

Bằng cách tích hợp các cải tiến này, ứng dụng sẽ không chỉ đáp ứng các yêu cầu chức năng mà còn là một tài nguyên học tập có giá trị cho những người mới học phát triển web với Flask.

**Kết Quả Cuối Cùng**:
- Cung cấp mã hoàn chỉnh cho ứng dụng, được tổ chức theo năm giai đoạn như được nêu trong tài liệu đính kèm.
- Đảm bảo tất cả các cải tiến (bình luận, xử lý lỗi, cấu hình an toàn, v.v.) được tích hợp.
- Nếu có thể, bao gồm một tóm tắt ngắn gọn về cách chạy và kiểm thử ứng dụng (ví dụ: thiết lập môi trường ảo, cài đặt phụ thuộc, chạy ứng dụng Flask).

Cảm ơn sự hỗ trợ của bạn!